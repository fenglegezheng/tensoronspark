{
  "name": "Tensorspark",
  "tagline": "Running Tensorflow on Spark in the scalable, fast and compatible style",
  "body": "# tensorspark\r\nRunning Tensorflow on Spark in the scalable, fast and compatible style\r\n\r\nTensorspark facilitates the researchers and programmer to easily write the regular Tensorflow programs and run Tensorflow on the Spark distributed computing paradigm. Tensorspark is innovated by the SparkSession, which  parallelizes the Tensorflow sessions in different executors of Spark. SparkSession maintains a riable central parameter server, which synchronizes the machine learning model parameters periodically with the worker executors. \r\n\r\n##Programming example\r\nTensorspark program is very easy to write if one is already familiar with Tensorflow. An complete example of writing the MNIST program can be checked out in src/example/spark_mnist.py.\r\n```\r\n#initialize the learning model exactly as Tensorflow\r\nimport tensorflow as tf\r\nx = tf.placeholder(tf.float32, [None, 784])\r\nW = tf.Variable(tf.zeros([784, 10]))\r\nb = tf.Variable(tf.zeros([10]))\r\ny = tf.nn.softmax(tf.matmul(x, W) + b)\r\ny_ = tf.placeholder(tf.float32, [None, 10])\r\ncross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\r\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\r\ninit = tf.initialize_all_variables()\r\nsess = tf.Session()\r\nsess.run(init)\r\n\r\n#Extra information to notify the SparkSession about the input/output tensor and the variables.\r\nfeed_name_list = [x.name, y_.name]\r\nparam_list = [W, b]\r\n\r\n#Initialize the SparkSession and run it with the Spark RDD data. \r\nspark_sess = sps.SparkSession(sc, sess, user='liangfengsid', name='spark_mnist', server_host='localhost', server_port=10080, sync_interval=100, batch_size=100)\r\nspark_sess.run(train_step, feed_rdd=image_label_rdd, feed_name_list=feed_name_list, param_list=param_list, shuffle_within_partition=True)\r\n```\r\n\r\n##Brief Installation Instruction (Linux or Mac OS):\r\n\r\n###Install Tensorflow in each computer\r\nhttps://www.tensorflow.org/versions/r0.9/get_started/os_setup.html\r\n\r\n###Setup the Hadoop and Spark cluster \r\nhttp://spark.apache.org\r\n  \r\n###Install TornadoWeb in each computer (Optional if the anaconda python is used). \r\nhttp://www.tornadoweb.org/en/stable/\r\n\r\n###Install TensorSpark:\r\n```\r\n$ easy_install tensorspark\r\n```\r\nor download the source at github, compile and install it via:\r\n```\r\n$ python setup.py build\r\n$ python setup.py install\r\n```\r\n  \r\n###Configure the Spark cluster for Tensorspark\r\nIn the Spark configuratino file, conf/spark-defaults.conf, add the following configuration information\r\n```\r\n#The directory in HDFS to store the SparkSession temporary files\r\nspark.hdfs.dir \t/data\r\n#The directory in the local computer to store the SparkSession temporary files\r\nspark.tmp.dir \t/tmp\r\n```\r\n\r\n###Create the corresponding directory in HDFS configured in the previous step\r\n```\r\nbin/hadoop fs -mkdir /data\r\n```\r\n\r\n###Prepare the MNIST example data and upload them to HDFS\r\nDownload the MNIST train data file in this github under: src/MNIST_data/. \r\n\r\nUpload them to HDFS:\r\n```\r\nhadoop fs -put MNIST_data/* /data\r\n```\r\n\r\n###Run the MNIST example\r\nRun Spark pyspark via the shell.\r\n```\r\npyspark --deploy-mode=client\r\n>>>import tensorspark.example.spark_mnist as mnist\r\n>>># The 'user' parameter is the user name of HDFS\r\n>>>mnist.train(sc=sc, user='liangfengsid', name='mnist_try', server_host='localhost', server_port=10080, sync_interval=100, batch_size=100, num_partition=1, num_epoch=2)\r\n```\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}